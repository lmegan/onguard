
<div class="banner-event" style="background-image: linear-gradient(-225deg, rgba(0,101,168,0.6) 0%, rgba(0,36,61,0.6) 50%), url('https://kitt.lewagon.com/placeholder/cities/berlin');">
  <div class="banner-content"></div>
</div>

<div class="event-show-container">
  <div class="event-details-box">
    <div class="top-event-container">
      <div class="row">
          <div class="event-show-name"><h2><%= @event.name %></h2> <span class="event-status"><% if @event.active == true %>
            <p>Status: Active</p>
            <% elsif @event.active == false %>
            <p>Status: Inactive</p>
            <% end %> </span></div>
           <div class="col-xs-12 col-sm-8">
            <div class="event-details-left">
              <div class="event-show-description"><p><%= @event.description %></p></div>
              <div class="event-dates">
                <p>Location:  <%= @event.location %></p>
                <p>Event Starts: <%= @event.start_date %></p>
                <p>Event Ends: <%= @event.end_date %></p>
              </div>
            </div>
          </div>
         <div class="col-sm-4 photo-event" >
        <div>
          <img class="event-photo" src="https://picsum.photos/200/300/?random">
        </div>
            </div>

               <div class="col-sm-6" >
                <div class="links-from-event-show-page">

                  <button type="button" class="btn btn-standard" data-toggle="modal" data-target="#myModal">Update Event</button>

                   <button class="btn-standard"><%= link_to "Delete event", event_path(@event),
                   method: :delete,
                   data: { confirm: "Are you sure?" } %>
                 </button>
                  <% if @event.active == true %>
               <button class="btn-standard" class="event-deactivate-trigger">
                <%= link_to "Deactivate Event", deactivate_event_path(@event), method: :post %>
                <% end %>
              </button>
          </div>
      </div>

  </div>
</div>
</div>

<div class="event-line">
</div>
<p class="event-log-title">Event log</p>
<ul class="inbox">
  <% @event_logs.each do |event_log| %>
  <li class="message">
    <div class="message-date">
      <p><strong>Date Received</strong></p>
      <p><%= event_log.date_time %></p>
    </div>
    <div class="message-body">
      <p><%= event_log.description %></p>
    </div>
    <div class="message-status">
      <p class="message-name">Attachment</p>
      <p class="price"><% if event_log.attachment = !nil %>
        <%= "yes"%>
        <% end  %>
      </p>
    </div>
  </li>
  <% end %>
</ul>
</div>




<div class="modal fade bd-example-modal-lg" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add an Event</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div class="event-form-container">
          <div class="col-xs-12">
            <%= simple_form_for @event do |f| %>
            <div class="form-input">
              <%= f.input :name %>
              <div class="event-dates-container">
                <div class="col-xs-6">
                  <label>Event starts:</label>
                  <input name="start_date" class="flatpickr flatpickr-input form-control" placeholder="date" id= "start-day" data-dateFormat="l, F j, Y">
                  <input name="start_time" class="flatpickr form-control" placeholder="time" id="start-time">
                </div>
                <div class="col-xs-6">
                 <label>Event ends:</label>
                 <input name="end_date" class="flatpickr flatpickr-input form-control" placeholder="date"id= "end-day" data-dateFormat="l, F j, Y">
                 <input name="end_time" class="flatpickr form-control" placeholder="time" id="end-time">
               </div>
             </div>
             <%= f.input :description %>
             <%= render 'layouts/autocomplete' , f: f %>
             <div id="map" style=""></div>
             <%= f.input :active, as: :boolean %>

           </div>
           <div class="col-xs-12"><%= f.submit "Update Event", class: "btn-primary btn" %></div>
           <% end %>
         </div>
       </div>
       <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>

  </div>
</div>
</div>




    <script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initMap() {
        var map = new google.maps.Map(document.getElementById('mymap'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13
        });
        var card = document.getElementById('pac-card');
        var input = document.getElementById('pac-input');
        var types = document.getElementById('type-selector');
        var strictBounds = document.getElementById('strict-bounds-selector');

        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

        var autocomplete = new google.maps.places.Autocomplete(input);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo('bounds', map);

        // Set the data fields to return when the user selects a place.
        autocomplete.setFields(
            ['address_components', 'geometry', 'icon', 'name']);

        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
          map: map,
          anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function() {
          infowindow.close();
          marker.setVisible(false);
          var place = autocomplete.getPlace();
          if (!place.geometry) {
            // User entered the name of a Place that was not suggested and
            // pressed the Enter key, or the Place Details request failed.
            window.alert("No details available for input: '" + place.name + "'");
            return;
          }

          // If the place has a geometry, then present it on a map.
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);  // Why 17? Because it looks good.
          }
          marker.setPosition(place.geometry.location);
          marker.setVisible(true);

          var address = '';
          if (place.address_components) {
            address = [
              (place.address_components[0] && place.address_components[0].short_name || ''),
              (place.address_components[1] && place.address_components[1].short_name || ''),
              (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
          }

          infowindowContent.children['place-icon'].src = place.icon;
          infowindowContent.children['place-name'].textContent = place.name;
          infowindowContent.children['place-address'].textContent = address;
          infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            autocomplete.setTypes(types);
          });
        }

        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);

        document.getElementById('use-strict-bounds')
            .addEventListener('click', function() {
              console.log('Checkbox clicked! New state=' + this.checked);
              autocomplete.setOptions({strictBounds: this.checked});
            });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_API_BROWSER_KEY']}&libraries=places&callback=initMap"
        async defer></script>

        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script type="text/javascript">
const startDate = document.querySelector("#start-day");
flatpickr(startDate, {
  dateFormat: "Y-m-d",
});  // flatpickr

const endDate = document.querySelector("#end-day");
flatpickr(endDate, {
  dateFormat: "Y-m-d",
});  // flatpickr
  const startTime = document.querySelector("#start-time");
flatpickr(startTime, {
    enableTime: true,
    noCalendar: true,
    static: true
});  // flatpickr
  const endTime = document.querySelector("#end-time");
flatpickr(endTime, {
    enableTime: true,
    noCalendar: true,
    static: true
});  // flatpickr
</script>
  </body>



